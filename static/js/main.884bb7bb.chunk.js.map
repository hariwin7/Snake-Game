{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","ifSnakeHead","box","snake","state","snakeHead","boxrow","boxcol","ifFood","food","ifSnakeBody","body","find","sBody","startSnakeGame","eatFood","incrementScore","setState","_ref","updateState","objectSpread","snakeSpeed","y","x","concat","toConsumableArray","randomFood","pop","checkBoundary","gameOver","stopGame","score","status","_ref2","snakeDirection","gameInterval","Math","floor","random","runSnake","_this$state","console","log","gameStatus","clearInterval","start","setInterval","restart","_this$state2","componentDidMount","document","addEventListener","directionKey","code","message","square","boxcols","push","randFood","_this2","style","_this$state3","react_default","a","createElement","Fragment","className","role","onClick","map","i","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.884bb7bb.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    const square = []; // For making the canvas in which snake runs\n    for(let boxrow = 0;boxrow < 20;boxrow++){\n      const boxcols=[];\n      for(let boxcol = 0;boxcol < 20;boxcol++){\n        boxcols.push({\n          boxrow,\n          boxcol\n        });\n      }\n      square.push(boxcols);\n    }\n    this.state= {\n      square,\n      // Creating The Food For Snake At Random Positions\n      food : {\n        boxrow : Math.floor(Math.random() * 20),\n        boxcol: Math.floor(Math.random() * 20),\n      },\n      snake: {\n        snakeHead: {\n          boxrow: 9,\n          boxcol: 9\n        },\n        snakeSpeed: {\n          x: 1,\n          y: 0\n        },\n        body: []\n        \n      },\n      score:0, // Score Of The Game \n      snakeDirection:\"ArrowRight\", // Storing The Keyboard Keys In A Variable\n      gameInterval:0,\n      gameStatus:1, // A Toggle Switch For Staring And Restarting The Game\n      gameOver:0\n    }\n  }\n// Function To Check The Head Of Snake In The Canvas.\n  ifSnakeHead = (box) => {\n    const { snake } = this.state;\n    return snake.snakeHead.boxrow === box.boxrow &&\n    snake.snakeHead.boxcol === box.boxcol ;\n  }\n// Function To Check Food In The Canvas.\n  ifFood = (box) => {\n    const { food } = this.state;\n    return food.boxrow === box.boxrow && \n    food.boxcol === box.boxcol ;\n  }\n// Function To Check The Body Of Snake In The Canvas.\n  ifSnakeBody = (box) => {\n    const { snake } = this.state;\n    return snake.body.find(sBody => sBody.boxrow === box.boxrow && sBody.boxcol === box.boxcol);\n  }\n  // Function That Updates Score And Speed Also Checks Boundary And SelfCollision\n  startSnakeGame = () =>{\n    const eatFood = this.eatFood();\n    if (eatFood) this.incrementScore();\n    this.setState(({ snake , food}) =>{\n      const updateState = {\n      snake: {\n        ...snake,\n        snakeHead: {\n          boxrow: snake.snakeHead.boxrow + snake.snakeSpeed.y,\n          boxcol: snake.snakeHead.boxcol + snake.snakeSpeed.x\n        },\n        body : [snake.snakeHead , ...snake.body],\n      },\n      food : this.eatFood() ? this.randomFood() : food \n     };\n     if(!eatFood){\n      updateState.snake.body.pop();\n     } \n     return updateState;\n  },() =>{\n      const { snake } = this.state;\n      if (this.checkBoundary() || this.ifSnakeBody(snake.snakeHead)){\n        this.gameOver(1);\n        this.stopGame();\n      }\n        return;\n  }  )\n    \n  }\n// Function To Incremnent Score When Snake Eats Food\n  incrementScore = () => {\n    if(this.eatFood()){\n      this.setState({ score : this.state.score + 5});\n    }\n  }\n// Function To Make The Game Over In Case Of Outofbounds Or Self Collision\n  gameOver = (status) =>{\n      this.setState(({ food , snake, score , snakeDirection, gameInterval}) =>{\n        const updateState = {\n      food : {\n        boxrow : Math.floor(Math.random() * 20),\n        boxcol: Math.floor(Math.random() * 20),\n      },\n      snake: {\n        snakeHead: {\n          boxrow: 9,\n          boxcol: 9\n        },\n        snakeSpeed: {\n          x: 1,\n          y: 0\n        },\n        body: []\n        \n      },\n      score:0,\n      snakeDirection:\"ArrowRight\",\n      gameInterval:0,\n      gameOver:status\n    }\n     return updateState;\n        \n      });\n  }\n// Function To Check If Snake Goes Out Of Canvas\n  checkBoundary = () =>{\n    const { snake } = this.state;\n    return  (snake.snakeHead.boxrow > 19 || snake.snakeHead.boxrow <0 \n      || snake.snakeHead.boxcol > 19 || snake.snakeHead.boxcol < 0);\n\n  }\n  // Function To Randomise The Position Of Food\n   randomFood(){\n    const { snake } = this.state;\n    const randFood = {\n      boxrow : Math.floor(Math.random() * 20),\n      boxcol: Math.floor(Math.random() * 20),\n    }\n    if (this.ifSnakeBody(randFood) || (snake.snakeHead.boxrow === \n      randFood.boxrow && snake.snakeHead.boxcol === randFood.boxcol)){\n        return this.randomFood();\n      }\n      else\n      return randFood;\n    }\n // Function That Changes The Direction Of The Snake On Keyborad Interrupt\n  runSnake = () => {\n    \n      const { snake, snakeDirection } = this.state;\n      switch(snakeDirection){\n        case \"ArrowUp\" :\n        console.log(\"up\")\n        if (snake.snakeSpeed.y !== 1) {\n          this.setState( {\n            snake:{\n              ...snake,\n              snakeSpeed:{\n                x:0,\n                y:-1\n              }\n            }\n          });}\n        break;\n        case \"ArrowDown\" :\n        if (snake.snakeSpeed.y !== -1) {\n          this.setState({\n            snake:{\n              ...snake,\n              snakeSpeed:{\n                x:0,\n                y:1\n              }\n            }\n          });}\n        break;\n        case \"ArrowRight\" :\n        console.log(\"right\")\n        if (snake.snakeSpeed.x !== -1) {\n          this.setState( {\n            snake:{\n              ...snake,\n              snakeSpeed:{\n                x:1,\n                y: 0\n              }\n            }\n          });}\n        break;\n        case \"ArrowLeft\" :\n        if (snake.snakeSpeed.x !==1){\n          this.setState({\n            snake:{\n              ...snake,\n              snakeSpeed:{\n                x:-1,\n                y:0\n              }\n            }\n          });}\n        break;\n        default: console.log(\"default\")\n        \n      }\n      this.startSnakeGame();\n  }\n//Functio To Pause The Game\n  stopGame = () => {\n    if(this.state.gameStatus===0){\n    this.setState({gameStatus:1})\n    clearInterval(this.state.gameInterval);\n    }\n  }\n  // Function That Starts The Game \n  start = () =>{\n    if(this.state.gameStatus===1){\n    this.setState({gameStatus:0 , gameOver :0})\n    this.setState({ gameInterval : setInterval(this.runSnake, 250) }); \n    }\n  }\n  // Function  To Restart The Game \n  restart = () =>{\n    this.gameOver();\n    this.stopGame(0);\n  }\n// Function That Checks If The Snake Eats The Food\n  eatFood = () =>{\n    const { snake, food } = this.state;\n    return food.boxrow === snake.snakeHead.boxrow &&\n    food.boxcol === snake.snakeHead.boxcol;\n\n  }\n\n  componentDidMount = () => {\n    document.addEventListener('keydown', (directionKey) => {\n      this.setState({snakeDirection : directionKey.code })\n      console.log(this.state.snakeDirection);\n    });\n    this.start();\n       \n  }\n  // Function That Helps To Update The Messages Displayed For UserInteractivity And Understanding\n  gameStatus = () =>{\n    let message=\"\";\n    if (this.state.gameOver){\n      message += \"Game Over! \";\n    }\n    if (this.state.gameStatus){\n      message += \"Press Start Game\";\n    }\n    return message;\n  }\n  \n\n  render() {\n    document.body.style = 'background: #58B792;';\n    const {square , score} = this.state;\n    return (\n      <React.Fragment>\n       \n        <div className=\"App\">\n          <div className=\"container\"> \n            <div className=\"row justify-content-center\">\n                <h1> <span className=\"badge badge-success score\">Score: {score}</span></h1>\n            </div>\n              <div className=\"row justify-content-center\">\n                <div className=\"btn-group marg-btm\" role=\"group\">\n                  <button className=\"btn btn-dark\" onClick={this.restart}>Restart Game</button>\n                  <button className=\"btn btn-dark\" onClick={this.stopGame}>Pause Game</button>\n                  <button className=\"btn btn-dark\" onClick={this.start}>Start Game</button>\n                </div>\n              </div>\n            <div className=\"row justify-content-center\">\n              <div className=\"square\">\n                {\n                  square.map((boxrow, i) =>(\n                      boxrow.map((box) =>(\n\n                        <div key={`${box.boxrow} ${box.boxcol}`} className={`box \n                        ${\n                          this.ifSnakeHead(box)\n                          ? 'snake' : this.ifFood(box)\n                          ? 'food' : this.ifSnakeBody(box)\n                          ? 'snakebody' : ''\n                          }`}>\n                        </div>\n                      ))\n                  ))\n\n                \n                }\n                </div> \n                </div>\n                <div className=\"row  justify-content-center\">                \n                  <h1>{this.gameStatus()}</h1>                \n                </div>\n                       \n          </div>\n        </div>\n\n      </React.Fragment>\n    );\n        }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}